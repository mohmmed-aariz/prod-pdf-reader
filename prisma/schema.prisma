datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  role          Role      @default(USER)
  // admin Admin? // Optional one-to-one relationship 
  agency        Agency?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  viewHistory    ViewHistory[]
}

model Agency {
  id           String        @id @default(uuid())
  userId       String        @unique
  // username     String         @unique
  // password     String
  // name         String?
  // role         Role           @default(AGENCY_USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  pdfDocuments PdfDocument[]
  // sessions     AdminSession[]
  user         User          @relation(fields: [userId], references: [id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  role         Role?
  // currently the role is optional, but need to make changes to role i.e. @default(USER); 
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model PdfDocument {
  id            String    @id @default(uuid())
  title         String  //
  description   String?  //
  coverImageUrl String?  
  coverImageKey String? @unique
  pdfUrl        String  
  pdfAppUrl     String
  pdfKey        String  @unique
  totalPages    Int
  pdfPagesUrl   String[] 
  pdfPagesKey String[]
  hide          Boolean   @default(false) //
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  size          Int 
  pages         PdfPage[]
  authorId String?
  author    Agency?    @relation(fields: [authorId], references: [id])
  viewCount      DocumentViewCount?
  viewHistory    ViewHistory[]


  // authorId      String
  // author        Agency    @relation(fields: [authorId], references: [id])

  // @@index([authorId])
}

model PdfPage {
  id            String      @id @default(uuid())
  title         String
  pageNumber    Int
  pdfUrl        String
  pdfAppUrl     String
  pdfKey        String
  pdfDocumentId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pdfDocument   PdfDocument @relation(fields: [pdfDocumentId], references: [id])

  @@index([pdfDocumentId])
}

// model LandingPageContent {
//   id String @id @default(uuid())
//   image_url String?
//   image_key String?
//   title String?
//   description String?
//   createdAt DateTime @default(now())
//   updatedAt     DateTime    @updatedAt


// }

enum Role {
  ADMIN
  AGENCY_USER
  GUEST
  USER
}



model ViewHistory {
  id             String          @id @default(cuid())
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  documentId     String
  pdfDocument       PdfDocument     @relation(fields: [documentId], references: [id])
  viewedAt       DateTime        @default(now())
}

model DocumentViewCount {
  id             String          @id @default(uuid())
  documentId     String @unique
  pdfDocument       PdfDocument     @relation(fields: [documentId], references: [id])
  viewCount      Int             @default(0)
}




// model User {
//   id            String    @id @default(uuid())
//   name          String?
//   email         String?    @unique

//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   image         String?
//   emailVerified DateTime?
//   accounts      Account[]
//   sessions      Session[]
// }

// model Admin {
//   id           String         @id @default(uuid())
//   username     String         @unique
//   password     String
//   name         String?
//   role         Role           @default(AGENCY_USER)
//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt
//   sessions     AdminSession[]
//   pdfDocuments PdfDocument[]
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
//   user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model AdminSession {
//   sessionToken String   @unique
//   adminId      String
//   expires      DateTime
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

//   @@index([adminId])
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id            String    @id @default(uuid())
//   name          String?
//   email         String    @unique
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   image         String?
//   emailVerified DateTime?
//   accounts      Account[]
//   sessions      Session[]
// }

// model Admin {
//   id           String         @id @default(uuid())
//   username     String         @unique
//   password     String
//   name         String?
//   role         Role           @default(AGENCY_USER)
//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt
//   sessions     AdminSession[]
//   pdfDocuments PdfDocument[]
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
//   createdAt         DateTime @default(now())
//   updatedAt         DateTime @updatedAt
//   user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model AdminSession {
//   sessionToken String   @unique
//   adminId      String
//   expires      DateTime
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   admin        Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)

//   @@index([adminId])
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }

// model PdfDocument {
//   id            String    @id @default(uuid())
//   title         String
//   description   String?
//   coverImageUrl String?
//   pdfUrl        String
//   pdfAppUrl     String
//   pdfKey        String
//   totalPages    Int
//   pdfPagesUrl   String[]
//   hide          Boolean   @default(false)
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   authorId      String
//   size          Int
//   author        Admin     @relation(fields: [authorId], references: [id])
//   pages         PdfPage[]

//   @@index([authorId])
// }

// model PdfPage {
//   id            String      @id @default(uuid())
//   title         String
//   pageNumber    Int
//   pdfUrl        String
//   pdfAppUrl     String
//   pdfKey        String
//   pdfDocumentId String
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime    @updatedAt
//   pdfDocument   PdfDocument @relation(fields: [pdfDocumentId], references: [id])

//   @@index([pdfDocumentId])
// }

// enum Role {
//   ADMIN
//   AGENCY_USER
//   GUEST 
//   USER
// }
